import numpy as np
import copy


def rho(v,dx, alpha, D, q):
    r = np.copy(v)**2
    r /= (1+q)*alpha*D
    r += 1
    r = r**(-(1-q)/2)
    N = np.sum(r)*dx 
    r /= N
    
    return r

def rho2(v,dx, alpha, D, q, kg):
    r = np.copy(v)**2
    r /= (1+q)*alpha*D
    r += 1
    e =  1 -q 
    a = kg/alpha
    #e += a*(1+q)
    e -= q*a/(q - (1+q)*a)
    r = r**(-e/2)
    N = np.sum(r)*dx 
    r /= N
    
    return r


from scipy.integrate import quad

def rho3(v,x, alpha, D, q, kg):
    dx = x[1]- x[0]

    I = v*v/alpha
    I = I/( (1+q)*D + I)
    I *= kg/alpha
    for i in range(1,I.shape[0]) :
        I[i] = I[i]*dx + I[i-1]

    I = np.exp(-I) 

    r =rho(v,dx,alpha,D,q)
    I *= r

    N = np.sum(I)*dx
    return I/N
    
